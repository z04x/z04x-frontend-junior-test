// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const state = {
    posts: [],          
    sortConfig: {
        column: null,   // –¢–µ–∫—É—â–∞—è –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        isAscending: true // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é/—É–±—ã–≤–∞–Ω–∏—é)
    }
};

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const API_CONFIG = {
    BASE_URL: 'https://jsonplaceholder.typicode.com',
    ENDPOINTS: {
        POSTS: '/posts'
    }
};

const SEARCH_CONFIG = {
    MIN_QUERY_LENGTH: 3
};

// –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
const api = {
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ—Å—Ç—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
     * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ –ø–æ—Å—Ç–æ–≤
     */
    async getPosts() {
        const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.POSTS}`);
        if (!response.ok) {
            console.error(response)
        }
        return response.json();
    }
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DOM
const domHelpers = {
    /**
     * –°–æ–∑–¥–∞–µ—Ç —è—á–µ–π–∫—É —Ç–∞–±–ª–∏—Ü—ã —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
     */
    createTableCell(content, searchQuery = '') {
        const cell = document.createElement('td');
        cell.classList.add('table__cell');

        if (searchQuery) {
            const highlightPattern = new RegExp(`(${searchQuery})`, 'gi');
            cell.innerHTML = content.toString().replace(highlightPattern, '<mark>$1</mark>');
        } else {
            cell.textContent = content;
        }

        return cell;
    },

    /**
     * –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–æ—Å—Ç–∞
     */
    createTableRow(post, searchQuery = '') {
        const row = document.createElement('tr');
        row.classList.add('table__row');

        const cellsContent = [
            post.userId,
            post.id,
            post.title,
            post.body
        ];

        cellsContent.forEach(content => {
            row.appendChild(this.createTableCell(content, searchQuery));
        });

        return row;
    }
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Å—Ç–∞–º–∏
const postsManager = {
    /**
     * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ—Å—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü–µ
     */
    displayPosts(posts, searchQuery = '') {
        const tableBody = document.querySelector('.table__body');
        tableBody.innerHTML = '';

        posts.forEach(post => {
            tableBody.appendChild(domHelpers.createTableRow(post, searchQuery));
        });
    },

    /**
     * –°–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ—Å—Ç—ã –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–æ–ª–æ–Ω–∫–µ
     */
    sortPosts(column) {
        if (state.sortConfig.column === column) {
            state.sortConfig.isAscending = !state.sortConfig.isAscending;
        } else {
            state.sortConfig.column = column;
            state.sortConfig.isAscending = true;
        }

        const sortedPosts = [...state.posts].sort((a, b) => {
            const direction = state.sortConfig.isAscending ? 1 : -1;
            return a[column] > b[column] ? direction : -direction;
        });

        this.updateSortIndicators();
        this.displayPosts(sortedPosts);
    },

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö —Ç–∞–±–ª–∏—Ü—ã
     */
    updateSortIndicators() {
        document.querySelectorAll('.sortable').forEach(header => {
            const column = header.dataset.sort;
            header.textContent = header.dataset.label;

            if (column === state.sortConfig.column) {
                header.textContent += state.sortConfig.isAscending ? ' ‚ñ≤' : ' ‚ñº';
            }
        });
    },

    /**
     * –§–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ—Å—Ç—ã –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
     */
    filterPosts(query) {
        if (query.length < SEARCH_CONFIG.MIN_QUERY_LENGTH) {
            this.displayPosts(state.posts);
            return;
        }

        const filteredPosts = state.posts.filter(post =>
            post.title.toLowerCase().includes(query) ||
            post.body.toLowerCase().includes(query)
        );

        this.displayPosts(filteredPosts, query);
    }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
const eventHandlers = {
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
     */
    initSortingHandlers() {
        document.querySelectorAll('.sortable').forEach(header => {
            header.addEventListener('click', () => {
                postsManager.sortPosts(header.dataset.sort);
            });
        });
    },

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞
     */
    initSearchHandler() {
        const searchInput = document.querySelector('.page__search-input');
        searchInput.addEventListener('input', (e) => {
            const query = e.target.value.trim().toLowerCase();
            postsManager.filterPosts(query);
        });
    }
};

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
 */
function handleError(error) {

    const errorElement = document.querySelector('.page__error-message');
    errorElement.textContent = `üò¢ –£–ø—Å.. –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫`;
    errorElement.style.display = 'block';
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
async function initApp() {
    try {
        state.posts = await api.getPosts();
        postsManager.displayPosts(state.posts);
        eventHandlers.initSortingHandlers();
        eventHandlers.initSearchHandler();
    } catch (error) {
        handleError(error);
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', initApp);